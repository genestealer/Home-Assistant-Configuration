
##############################################################
# 🏠 Richard Huish 2025
# 📌 ESPHome Configuration - Consumer Unit Energy Monitoring
# 📂 Repository: https://github.com/genestealer/Home-Assistant-Configuration
#
# 📝 Description:
# This ESPHome configuration monitors real-time energy consumption
# using a current transformer (SCT-013-000) and ADS1115 ADC.
# The system integrates with Home Assistant for tracking power usage
# and calculating daily energy consumption.
# https://docs.openenergymonitor.org/electricity-monitoring/ct-sensors/interface-with-arduino.html
#
# Includes shared configurations from the 'common' directory
#
# 🔧 Features:
# - ✅ Measures AC current using a CT clamp (SCT-013-000).
# - ✅ Calculates power usage (Watts) and energy (kWh).
# - ✅ Utilizes ADS1115 for 16-bit precision in readings.
# - ✅ Integrates with Home Assistant for live monitoring & automation.
#
# 🔩 Hardware:
# - Adafruit Feather HUZZAH ESP8266 (Wi-Fi Microcontroller)
# - YHDC SCT-013-000 (60A/1V Current Transformer)
# - ADS1115 ADC (4-Channel 16-Bit A/D Converter)
# - 10μF Multilayer Ceramic Capacitor MLCC, 50V dc V RS Stock No 811-8367
# - 2 x 10K Ohm resistor volatge devider. 3.3V DC and GND 
# 
# 🔌 WIRING:
# The current transformer (CT) is connected to GND and one side of a 10µF capacitor.
# The other side of the capacitor is connected to the mid-point of a voltage divider, 
# which consists of two 10KΩ resistors in series between 3.3V DC and GND. 
# This voltage divider creates a bias voltage of 1.64V DC at its mid-point.
#
# - The analog input (ADS1115 A0) is connected to this mid-point (1.64V DC).
# - The capacitor allows the AC signal from the CT sensor to pass while blocking the DC bias, 
#   ensuring only the burden voltage is superimposed on the 1.64V reference.
# - As a result, the ADS1115 reads the burden voltage oscillating above and below the 1.64V bias.
#
# This setup ensures the AC signal is correctly referenced for accurate current measurement.
# 
#
##############################################################

# 🔄 Substitutions - Easily Configurable Parameters
substitutions:
  # 📛 Naming & Identification
  name: cu-current-clamp
  friendly_name: "Consumer Unit Current Clamp"
  ui_comment: "Oven Energy Monitoring"

  # 🌐 Network Configuration (Static IP)
  ip: 192.168.2.57
  gateway: 192.168.2.1
  subnet: 255.255.255.0

  # 🔴 Status LED Configuration
  status_led: LED_RED 
  status_led_inverted: "false"

  # 📦 Metadata & Versioning
  project_name: "genestealer.cu-current-clamp"
  project_version: "1.0.0"
  package_import_url: "github://genestealer/Home-Assistant-Configuration/esphome/cu-current-clamp.yaml"

  # 🛠 Debug Logging
  log_level: DEBUG 

  # 📊 Sensor Update Intervals
  sensor_update_interval: 1min  # General sensor update interval
  wifi_sensor_update_interval: 10min
  ct_sensor_update_interval: 60s  # CT clamp update interval
  
  # 🔄 Current Clamp Sampling Duration
  ct_clamp_sample_duration: 400ms  # Captures 20 full cycles (for 50Hz AC systems)

##############################################################
# 🚀 ESP Platform Configuration
##############################################################
esp8266:
  board: huzzah

##############################################################
# 🔗 Shared Code & Package Imports
##############################################################
packages:
  device_base: !include common/device_base.yaml
  status_led: !include common/status_led.yaml
  wifi: !include common/device_base_wifi.yaml

# 🌍 Dashboard Import Settings
dashboard_import:
  package_import_url: ${package_import_url}
  import_full_config: false  # Import only necessary sections

##############################################################
# 🔄 I2C Bus Configuration (Used for ADS1115)
##############################################################
i2c:
  sda: GPIO4
  scl: GPIO5
  frequency: 800kHz  # Faster communication for ADC

##############################################################
# 📟 ADS1115 (Analog-to-Digital Converter)
##############################################################
ads1115:
  - address: 0x48
    continuous_mode: true  # Enables fast continuous sampling

##############################################################
# 📊 Sensor Configuration
##############################################################


sensor:
# Commented out as I now have a separate energy meter for the oven and am just using the sensor for the SPD.


  # # 📡 ADS1115 Sensor Input (Raw Analog Voltage from CT Clamp)
  # - platform: ads1115
  #   name: "CT 1"
  #   id: adc_sensor
  #   multiplexer: 'A0_GND'  # Measuring between A1 and GND
  #   gain: 4.096   # Allows reading up to 4.096V (1.65V DC offset + 1V DC CT Clamp range)
  #   internal: true
  #   update_interval: 3s # Short update interval which is then filtered out
  #   accuracy_decimals: 3  # High precision
  #   filters:
  #     - offset: -1.642 # 10k/10k voltage divider between 3.3V and GND (1.640 V midpoint measured with DMM for A0_GND) Set lower to ensure we cut off any noise

  #     - median:
  #         window_size: 10  # Reduces noise by averaging 5 readings
  #         send_every: 3  # Sends updated value every 2 measurements
  #         # send_first_at: 3
  #     - clamp:
  #         min_value: 0 # Ignore negative and noise
  #         # max_value: 1.2
      
  #     - or:
  #       - heartbeat: ${ct_sensor_update_interval} # Ensure updates happen at least every ${ct_sensor_update_interval} seconds 
  #       - delta: 0.001 # Immediate update if value changes significantly

  # # 🔌 Current Transformer (CT Clamp) - Measures AC Current
  # - platform: ct_clamp
  #   sensor: adc_sensor
  #   name: "Oven Measured Current"
  #   id: ct_clamp_sensor
  #   accuracy_decimals: 2
  #   sample_duration: ${ct_clamp_sample_duration}  # Defines sampling period
  #   update_interval: 3s # Short update interval which is then filtered out
  #   filters:
  #     - calibrate_linear:
  #        method: least_squares
  #        datapoints:
  #         - 0.001 -> 0   # Adjusted zero calibration (removes offsets)
  #         - 1.0 -> 60       # 1V = 60A (standard for SCT-013-000)
  #     # - median:
  #     #     window_size: 5  # Reduces noise by averaging 5 readings
  #     #     send_every: 2  # Sends updated value every 2 measurements
  #     #     # send_first_at: 3
  #     - clamp:
  #         min_value: 0 # Ignore negative
  #         max_value: 60
  #     - or:
  #       - heartbeat: ${ct_sensor_update_interval} # Ensure updates happen at least every ${ct_sensor_update_interval} seconds 
  #       - delta: 0.1 # Immediate update if value changes significantly
        

  # # 🔌 Read Known Voltage from Home Assistant
  # - platform: homeassistant
  #   name: "Known Voltage"
  #   entity_id: sensor.myups_input_voltage
  #   id: known_volts
  #   accuracy_decimals: 3  # Ensures high precision for power calculation


  # # ⚡ Power Calculation (Watts) Based on Measured Current
  # - platform: template
  #   id: my_power1
  #   name: "Oven Power"
  #   update_interval: 3s # Short update interval which is then filtered out
  #   unit_of_measurement: "W"
  #   state_class: measurement
  #   device_class: power
  #   lambda: return (id(ct_clamp_sensor).state * id(known_volts).state);
  #   # lambda: |-
  #   #       float current = id(ct_clamp_sensor).state;
  #   #       if (current <= 0.03) return 0;
  #   #       float voltage = isnan(id(known_volts).state) ? 230.0 : id(known_volts).state;
  #   #       float power = current * voltage;
  #   #       ESP_LOGD("Power Calculation", "Voltage: %.1fV, Current: %.2fA, Power: %.1fW", voltage, current, power);
  #   #       return power;
  #   filters:
  #     - clamp:
  #         min_value: 0 # Ignore negative
  #     - or:
  #       - heartbeat: ${ct_sensor_update_interval} # Ensure updates happen at least every ${ct_sensor_update_interval} seconds 
  #       - delta: 50 # Immediate update if value changes significantly

      


  # # 🔋 Total Daily Energy Consumption (Resets at Midnight)
  # # Create a Utility Meter in Home Assistant and ensure periodically resetting is enabled as this value will reset on boot and also once a day.
  # - platform: total_daily_energy
  #   name: 'Oven Energy Today'
  #   id: sensor_total_daily_energy
  #   power_id: my_power1
  #   unit_of_measurement: 'kWh'
  #   icon: mdi:circle-slice-3
  #   state_class: total_increasing
  #   device_class: energy
  #   accuracy_decimals: 3
  #   filters:
  #     - throttle: ${sensor_update_interval}  # Limit update rate
  #     - multiply: 0.001  # Convert W to kW (1 W = 0.001 kW)
  #     - delta: 0.01  # Only update if energy changes by 0.01 kWh (10W)
  #     - heartbeat: ${sensor_update_interval}  # Ensure at least one update per interval


binary_sensor:

  # Surge Protection Device (SPD) monitoring pins. Pin is fitted with extrenal 10K pull-up resistor
  - platform: gpio
    pin:
      number: 12
      mode: INPUT
      inverted: true
    name: "SPD Expired"
    device_class: problem
    icon: "mdi:electric-switch"
    filters:
      - delayed_on: 1000ms
      - delayed_off: 1000ms

##############################################################
# ⏳ Time Component (Used for Resetting Energy Meter at Midnight)
##############################################################
time:
  - platform: homeassistant
    id: homeassistant_time  # Sync time with HA for accurate resets
