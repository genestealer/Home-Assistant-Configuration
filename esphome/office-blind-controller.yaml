##############################################################
# üè† Richard Huish 2025
# üìå ESPHome Configuration - Office Blind Controller
# üìÇ Repository: https://github.com/genestealer/Home-Assistant-Configuration
#
# üìù Description:
# This ESPHome configuration allows automated control of office blinds 
# using a WeMos D1 Mini (ESP8266). It supports:
# - Open, Close, and Stop actions
# - Tilt Open & Tilt Close adjustments
# - Reset function for calibration
# - Manual control via Home Assistant
#
# Includes shared configurations from the 'common' directory
#
# üî© Hardware:
# - ESP8266 (WeMos D1 Mini)
# - Relays or Transistors for Motor Control
#
# üõ† Wiring:
# - Blind Control Outputs
#   - Open ‚Üí GPIO12 (D6)  
#   - Close ‚Üí GPIO14 (D5)  
#   - Reset ‚Üí GPIO13 (D7)  
# - Status LED
#   - GPIO2 (D4) ‚Üí LED Indicator  
#
##############################################################

# üîÑ Substitutions for Easy Configuration
substitutions:
  # üìõ Naming & Identification
  name: office-blind-controller
  friendly_name: "Office Blind Controller"
  ui_comment: "Office Blind Controller" # Shown only in UI

  # üåê Network Configuration (Static IP)
  ip: 192.168.2.52
  gateway: 192.168.2.1
  subnet: 255.255.255.0

  # üî¥ Status LED Configuration
  status_led: D4  # GPIO2 - Onboard LED
  status_led_inverted: "true"

  # üì¶ Project Metadata
  project_name: "genestealer.office-blind-controller"
  project_version: "1.0.0"
  package_import_url: "github://genestealer/Home-Assistant-Configuration/esphome/office-blind-controller.yaml"

  # üõ† Debug Logging Level
  log_level: DEBUG

  # üìä Sensor Update Interval
  sensor_update_interval: 5min
  wifi_sensor_update_interval: 10min

##############################################################
# üöÄ ESP8266 Board Configuration
##############################################################
esp8266:
  board: d1_mini

##############################################################
# üîó Import Shared Code (Common Components)
##############################################################
packages:
  device_base: !include common/device_base.yaml
  wifi: !include common/device_base_wifi.yaml
  # Uncomment below to remove the status LED:
  # status_led: !remove

# üåç Dashboard Import Settings
dashboard_import:
  package_import_url: ${package_import_url}
  import_full_config: false  # Import only necessary sections

##############################################################
# ‚ö° Output Configuration (Motor Control Pins)
##############################################################
output:
  - platform: gpio
    id: open_motor
    pin:
      number: D6
      inverted: true
      mode: OUTPUT_OPEN_DRAIN  # Sink current for relay/transistor control

  - platform: gpio
    id: close_motor
    pin:
      number: D5
      inverted: true
      mode: OUTPUT_OPEN_DRAIN  # Sink current for relay/transistor control

  - platform: gpio
    id: reset_motor
    pin:
      number: D7
      inverted: true
      mode: OUTPUT_OPEN_DRAIN  # Sink current for relay/transistor control

##############################################################
# üéõÔ∏è Button Actions for Manual Control
##############################################################
button:
  - platform: template
    name: "Open Blinds"
    id: open_button
    on_press:
      - logger.log: "Opening Blinds"
      - output.turn_on: open_motor
      - delay: 110ms
      - output.turn_off: open_motor

  - platform: template
    name: "Close Blinds"
    id: close_button
    on_press:
      - logger.log: "Closing Blinds"
      - output.turn_on: close_motor
      - delay: 110ms
      - output.turn_off: close_motor

  - platform: template
    name: "Reset Blinds"
    id: reset_button
    device_class: restart
    entity_category: diagnostic
    on_press:
      - logger.log: "Resetting Blinds"
      - output.turn_on: reset_motor
      - delay: 5000ms
      - output.turn_off: reset_motor

  - platform: template
    name: "Tilt Open"
    id: tilt_open
    on_press:
      - logger.log: "Tilting Open"
      - output.turn_on: open_motor
      - delay: 110ms
      - output.turn_off: open_motor
      - delay: 110ms
      - output.turn_on: open_motor
      - delay: 110ms
      - output.turn_off: open_motor

  - platform: template
    name: "Tilt Close"
    id: tilt_closed
    on_press:
      - logger.log: "Tilting Closed"
      - output.turn_on: close_motor
      - delay: 110ms
      - output.turn_off: close_motor
      - delay: 110ms
      - output.turn_on: close_motor
      - delay: 110ms
      - output.turn_off: close_motor

##############################################################
# üåê Global Variables for Blind State Tracking
##############################################################
globals:
  - id: cover_opening
    type: bool
    initial_value: "false"

  - id: cover_closing
    type: bool
    initial_value: "false"

##############################################################
# üè† Cover Control for Automated Blind Movement
##############################################################
cover:
  - platform: template
    name: "Office Blinds"
    id: blinds
    device_class: blind
    optimistic: true
    assumed_state: true

    open_action:
      - logger.log: "Opening Blinds"
      - globals.set:
          id: cover_opening
          value: "true"
      - output.turn_on: open_motor
      - delay: 110ms
      - output.turn_off: open_motor
      - delay: 5000ms
      - globals.set:
          id: cover_opening
          value: "false"

    close_action:
      - logger.log: "Closing Blinds"
      - globals.set:
          id: cover_closing
          value: "true"
      - output.turn_on: close_motor
      - delay: 110ms
      - output.turn_off: close_motor
      - delay: 5000ms
      - globals.set:
          id: cover_closing
          value: "false"

    stop_action:
      - if:
          condition:
            lambda: 'return id(cover_opening);'
          then:
            - output.turn_on: open_motor
            - delay: 110ms
            - output.turn_off: open_motor
            - globals.set:
                id: cover_opening
                value: "false"

      - if:
          condition:
            lambda: 'return id(cover_closing);'
          then:
            - output.turn_on: close_motor
            - delay: 110ms
            - output.turn_off: close_motor
            - globals.set:
                id: cover_closing
                value: "false"
